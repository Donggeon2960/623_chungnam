
# 🧠 CNN (Convolutional Neural Network) 기초 정리

> CNN은 이미지 분류, 객체 탐지, 영상 처리 등에서 가장 널리 사용되는 딥러닝 구조입니다.  
> 이 문서는 CNN의 개요, 구조, 핵심 용어, 학습 흐름 등을 간단하고 명확하게 설명합니다.

---

## 📌 CNN이란?

- CNN(합성곱 신경망)은 **이미지 데이터를 다루기에 적합한 인공신경망 구조**
- 이미지의 **공간적 구조(위치, 모양, 색상 패턴)** 를 효율적으로 학습 가능
- 컴퓨터 비전, 자율주행, 얼굴 인식, 의료 영상, OCR 등에서 활용

---

## 🧱 CNN 기본 구성 요소

| 구성 요소 | 설명 |
|------------|------|
| **Convolution Layer** | 필터(커널)를 통해 특징 맵(feature map) 추출 |
| **Activation Function** | 비선형성 추가 (`ReLU`, `Sigmoid`, `Tanh`) |
| **Pooling Layer** | 공간 정보 요약 (주로 MaxPooling 사용) |
| **Flatten Layer** | 2D -> 1D 변환 (Fully Connected 입력 전) |
| **Fully Connected Layer** | 최종 출력층, 분류 결과를 생성 |
| **Dropout** | 과적합 방지를 위한 뉴런 비활성화 기법 |
| **Batch Normalization** | 학습 안정화 및 수렴 속도 개선 |

---

## 🔁 CNN 학습 흐름 요약

```text
입력 이미지
↓
[Conv → Activation → Pooling] × N
↓
Flatten
↓
Dense (FC Layer)
↓
Softmax (분류 결과)
```

---

## 📖 CNN 관련 주요 용어 정리

| 용어 | 설명 |
|------|------|
| **Kernel / Filter** | 입력 이미지에 적용되는 가중치 행렬 |
| **Stride** | 커널이 한 번에 이동하는 픽셀 수 |
| **Padding** | 이미지 외곽에 0을 추가하여 출력 크기 유지 |
| **Feature Map** | 합성곱 연산 결과 (특징 추출된 이미지) |
| **ReLU (Rectified Linear Unit)** | 음수 제거, 활성화 함수로 가장 많이 사용됨 |
| **Pooling (Max/Avg)** | 크기 축소, 특징 요약 (주로 MaxPooling 사용) |
| **Flatten** | 다차원 입력을 1D 벡터로 변경 |
| **Epoch** | 전체 데이터를 한 번 학습하는 과정 |
| **Batch Size** | 한 번에 학습에 사용하는 샘플 수 |
| **Loss Function** | 예측값과 실제값의 차이 측정 (예: cross-entropy) |
| **Optimizer** | 가중치 업데이트 알고리즘 (SGD, Adam 등) |
| **Overfitting** | 훈련 데이터에 과하게 적합된 상태 |
| **Regularization** | 과적합 방지를 위한 기술 (Dropout, L2 등) |
| **Backpropagation** | 오차 역전파로 가중치 업데이트 |

---

## 🧪 간단한 CNN 모델 구조 (PyTorch 예시)

```python
import torch.nn as nn

class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(1, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )
        self.fc = nn.Sequential(
            nn.Flatten(),
            nn.Linear(64 * 7 * 7, 128),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(128, 10)
        )

    def forward(self, x):
        x = self.conv(x)
        x = self.fc(x)
        return x
```

---

## 📦 CNN을 위한 필수 라이브러리

| 라이브러리 | 용도 |
|------------|------|
| `torch`, `torchvision` | 모델 구현, 학습 (PyTorch) |
| `tensorflow`, `keras` | 고수준 딥러닝 API (TensorFlow 기반) |
| `numpy`, `matplotlib` | 수치 연산 및 시각화 |
| `sklearn` | 성능 평가 (accuracy, confusion matrix 등) |

---

## ✅ 실전 적용 분야

- 이미지 분류 (MNIST, CIFAR, ImageNet)
- 객체 탐지 (YOLO, SSD, Faster R-CNN)
- 자율주행 (차선 인식, 교통 신호 인식)
- 의료 영상 (CT, X-ray 분석)
- 얼굴 인식, 표정 분석, OCR 등

---

## 📚 참고 자료

- [CS231n (Stanford CNN 강의)](https://cs231n.github.io/convolutional-networks/)
- [PyTorch 공식 튜토리얼](https://pytorch.org/tutorials/)
- [Keras CNN 예제](https://keras.io/examples/vision/)

---

> 작성자: [사용자 이름]  
> 날짜: 2025년 7월
